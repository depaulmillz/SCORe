// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace score {
class Committed;
class CommittedDefaultTypeInternal;
extern CommittedDefaultTypeInternal _Committed_default_instance_;
class Decide;
class DecideDefaultTypeInternal;
extern DecideDefaultTypeInternal _Decide_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Prepare;
class PrepareDefaultTypeInternal;
extern PrepareDefaultTypeInternal _Prepare_default_instance_;
class Prepare_ReadSetElement;
class Prepare_ReadSetElementDefaultTypeInternal;
extern Prepare_ReadSetElementDefaultTypeInternal _Prepare_ReadSetElement_default_instance_;
class Prepare_WriteSetElement;
class Prepare_WriteSetElementDefaultTypeInternal;
extern Prepare_WriteSetElementDefaultTypeInternal _Prepare_WriteSetElement_default_instance_;
class ReadOperation;
class ReadOperationDefaultTypeInternal;
extern ReadOperationDefaultTypeInternal _ReadOperation_default_instance_;
class ReadOperationResponse;
class ReadOperationResponseDefaultTypeInternal;
extern ReadOperationResponseDefaultTypeInternal _ReadOperationResponse_default_instance_;
class ReadRequest;
class ReadRequestDefaultTypeInternal;
extern ReadRequestDefaultTypeInternal _ReadRequest_default_instance_;
class ReadReturn;
class ReadReturnDefaultTypeInternal;
extern ReadReturnDefaultTypeInternal _ReadReturn_default_instance_;
class TxIDMsg;
class TxIDMsgDefaultTypeInternal;
extern TxIDMsgDefaultTypeInternal _TxIDMsg_default_instance_;
class TxOperationResponse;
class TxOperationResponseDefaultTypeInternal;
extern TxOperationResponseDefaultTypeInternal _TxOperationResponse_default_instance_;
class Vote;
class VoteDefaultTypeInternal;
extern VoteDefaultTypeInternal _Vote_default_instance_;
class WriteOperation;
class WriteOperationDefaultTypeInternal;
extern WriteOperationDefaultTypeInternal _WriteOperation_default_instance_;
class WriteOperationResponse;
class WriteOperationResponseDefaultTypeInternal;
extern WriteOperationResponseDefaultTypeInternal _WriteOperationResponse_default_instance_;
}  // namespace score
PROTOBUF_NAMESPACE_OPEN
template<> ::score::Committed* Arena::CreateMaybeMessage<::score::Committed>(Arena*);
template<> ::score::Decide* Arena::CreateMaybeMessage<::score::Decide>(Arena*);
template<> ::score::Empty* Arena::CreateMaybeMessage<::score::Empty>(Arena*);
template<> ::score::Prepare* Arena::CreateMaybeMessage<::score::Prepare>(Arena*);
template<> ::score::Prepare_ReadSetElement* Arena::CreateMaybeMessage<::score::Prepare_ReadSetElement>(Arena*);
template<> ::score::Prepare_WriteSetElement* Arena::CreateMaybeMessage<::score::Prepare_WriteSetElement>(Arena*);
template<> ::score::ReadOperation* Arena::CreateMaybeMessage<::score::ReadOperation>(Arena*);
template<> ::score::ReadOperationResponse* Arena::CreateMaybeMessage<::score::ReadOperationResponse>(Arena*);
template<> ::score::ReadRequest* Arena::CreateMaybeMessage<::score::ReadRequest>(Arena*);
template<> ::score::ReadReturn* Arena::CreateMaybeMessage<::score::ReadReturn>(Arena*);
template<> ::score::TxIDMsg* Arena::CreateMaybeMessage<::score::TxIDMsg>(Arena*);
template<> ::score::TxOperationResponse* Arena::CreateMaybeMessage<::score::TxOperationResponse>(Arena*);
template<> ::score::Vote* Arena::CreateMaybeMessage<::score::Vote>(Arena*);
template<> ::score::WriteOperation* Arena::CreateMaybeMessage<::score::WriteOperation>(Arena*);
template<> ::score::WriteOperationResponse* Arena::CreateMaybeMessage<::score::WriteOperationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace score {

// ===================================================================

class Empty PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  virtual ~Empty();

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Empty& default_instance();

  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:score.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class TxIDMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.TxIDMsg) */ {
 public:
  inline TxIDMsg() : TxIDMsg(nullptr) {}
  virtual ~TxIDMsg();

  TxIDMsg(const TxIDMsg& from);
  TxIDMsg(TxIDMsg&& from) noexcept
    : TxIDMsg() {
    *this = ::std::move(from);
  }

  inline TxIDMsg& operator=(const TxIDMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxIDMsg& operator=(TxIDMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxIDMsg& default_instance();

  static inline const TxIDMsg* internal_default_instance() {
    return reinterpret_cast<const TxIDMsg*>(
               &_TxIDMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TxIDMsg& a, TxIDMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TxIDMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxIDMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxIDMsg* New() const final {
    return CreateMaybeMessage<TxIDMsg>(nullptr);
  }

  TxIDMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxIDMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxIDMsg& from);
  void MergeFrom(const TxIDMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxIDMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.TxIDMsg";
  }
  protected:
  explicit TxIDMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
  };
  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:score.TxIDMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReadOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.ReadOperation) */ {
 public:
  inline ReadOperation() : ReadOperation(nullptr) {}
  virtual ~ReadOperation();

  ReadOperation(const ReadOperation& from);
  ReadOperation(ReadOperation&& from) noexcept
    : ReadOperation() {
    *this = ::std::move(from);
  }

  inline ReadOperation& operator=(const ReadOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOperation& operator=(ReadOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOperation& default_instance();

  static inline const ReadOperation* internal_default_instance() {
    return reinterpret_cast<const ReadOperation*>(
               &_ReadOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadOperation& a, ReadOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOperation* New() const final {
    return CreateMaybeMessage<ReadOperation>(nullptr);
  }

  ReadOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOperation& from);
  void MergeFrom(const ReadOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.ReadOperation";
  }
  protected:
  explicit ReadOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTxidFieldNumber = 1,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:score.ReadOperation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReadOperationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.ReadOperationResponse) */ {
 public:
  inline ReadOperationResponse() : ReadOperationResponse(nullptr) {}
  virtual ~ReadOperationResponse();

  ReadOperationResponse(const ReadOperationResponse& from);
  ReadOperationResponse(ReadOperationResponse&& from) noexcept
    : ReadOperationResponse() {
    *this = ::std::move(from);
  }

  inline ReadOperationResponse& operator=(const ReadOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOperationResponse& operator=(ReadOperationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadOperationResponse& default_instance();

  static inline const ReadOperationResponse* internal_default_instance() {
    return reinterpret_cast<const ReadOperationResponse*>(
               &_ReadOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReadOperationResponse& a, ReadOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOperationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadOperationResponse* New() const final {
    return CreateMaybeMessage<ReadOperationResponse>(nullptr);
  }

  ReadOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadOperationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadOperationResponse& from);
  void MergeFrom(const ReadOperationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOperationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.ReadOperationResponse";
  }
  protected:
  explicit ReadOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kTxidFieldNumber = 1,
    kAbortedFieldNumber = 3,
  };
  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool aborted = 3;
  bool has_aborted() const;
  private:
  bool _internal_has_aborted() const;
  public:
  void clear_aborted();
  bool aborted() const;
  void set_aborted(bool value);
  private:
  bool _internal_aborted() const;
  void _internal_set_aborted(bool value);
  public:

  // @@protoc_insertion_point(class_scope:score.ReadOperationResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  bool aborted_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class WriteOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.WriteOperation) */ {
 public:
  inline WriteOperation() : WriteOperation(nullptr) {}
  virtual ~WriteOperation();

  WriteOperation(const WriteOperation& from);
  WriteOperation(WriteOperation&& from) noexcept
    : WriteOperation() {
    *this = ::std::move(from);
  }

  inline WriteOperation& operator=(const WriteOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteOperation& operator=(WriteOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteOperation& default_instance();

  static inline const WriteOperation* internal_default_instance() {
    return reinterpret_cast<const WriteOperation*>(
               &_WriteOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WriteOperation& a, WriteOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteOperation* New() const final {
    return CreateMaybeMessage<WriteOperation>(nullptr);
  }

  WriteOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteOperation& from);
  void MergeFrom(const WriteOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.WriteOperation";
  }
  protected:
  explicit WriteOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kTxidFieldNumber = 1,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:score.WriteOperation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class WriteOperationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.WriteOperationResponse) */ {
 public:
  inline WriteOperationResponse() : WriteOperationResponse(nullptr) {}
  virtual ~WriteOperationResponse();

  WriteOperationResponse(const WriteOperationResponse& from);
  WriteOperationResponse(WriteOperationResponse&& from) noexcept
    : WriteOperationResponse() {
    *this = ::std::move(from);
  }

  inline WriteOperationResponse& operator=(const WriteOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteOperationResponse& operator=(WriteOperationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteOperationResponse& default_instance();

  static inline const WriteOperationResponse* internal_default_instance() {
    return reinterpret_cast<const WriteOperationResponse*>(
               &_WriteOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WriteOperationResponse& a, WriteOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteOperationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteOperationResponse* New() const final {
    return CreateMaybeMessage<WriteOperationResponse>(nullptr);
  }

  WriteOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteOperationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteOperationResponse& from);
  void MergeFrom(const WriteOperationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteOperationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.WriteOperationResponse";
  }
  protected:
  explicit WriteOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
  };
  // optional uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:score.WriteOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class TxOperationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.TxOperationResponse) */ {
 public:
  inline TxOperationResponse() : TxOperationResponse(nullptr) {}
  virtual ~TxOperationResponse();

  TxOperationResponse(const TxOperationResponse& from);
  TxOperationResponse(TxOperationResponse&& from) noexcept
    : TxOperationResponse() {
    *this = ::std::move(from);
  }

  inline TxOperationResponse& operator=(const TxOperationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TxOperationResponse& operator=(TxOperationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TxOperationResponse& default_instance();

  static inline const TxOperationResponse* internal_default_instance() {
    return reinterpret_cast<const TxOperationResponse*>(
               &_TxOperationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TxOperationResponse& a, TxOperationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TxOperationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TxOperationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TxOperationResponse* New() const final {
    return CreateMaybeMessage<TxOperationResponse>(nullptr);
  }

  TxOperationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TxOperationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TxOperationResponse& from);
  void MergeFrom(const TxOperationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TxOperationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.TxOperationResponse";
  }
  protected:
  explicit TxOperationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kTxidFieldNumber = 4,
  };
  // optional string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // optional uint64 txid = 4;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:score.TxOperationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.ReadRequest) */ {
 public:
  inline ReadRequest() : ReadRequest(nullptr) {}
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);
  ReadRequest(ReadRequest&& from) noexcept
    : ReadRequest() {
    *this = ::std::move(from);
  }

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadRequest& operator=(ReadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadRequest& default_instance();

  static inline const ReadRequest* internal_default_instance() {
    return reinterpret_cast<const ReadRequest*>(
               &_ReadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReadRequest& a, ReadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const final {
    return CreateMaybeMessage<ReadRequest>(nullptr);
  }

  ReadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.ReadRequest";
  }
  protected:
  explicit ReadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTxidFieldNumber = 1,
    kReadSidFieldNumber = 3,
    kFirstReadFieldNumber = 4,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 readSid = 3;
  bool has_readsid() const;
  private:
  bool _internal_has_readsid() const;
  public:
  void clear_readsid();
  ::PROTOBUF_NAMESPACE_ID::uint64 readsid() const;
  void set_readsid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_readsid() const;
  void _internal_set_readsid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool firstRead = 4;
  bool has_firstread() const;
  private:
  bool _internal_has_firstread() const;
  public:
  void clear_firstread();
  bool firstread() const;
  void set_firstread(bool value);
  private:
  bool _internal_firstread() const;
  void _internal_set_firstread(bool value);
  public:

  // @@protoc_insertion_point(class_scope:score.ReadRequest)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 readsid_;
  bool firstread_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class ReadReturn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.ReadReturn) */ {
 public:
  inline ReadReturn() : ReadReturn(nullptr) {}
  virtual ~ReadReturn();

  ReadReturn(const ReadReturn& from);
  ReadReturn(ReadReturn&& from) noexcept
    : ReadReturn() {
    *this = ::std::move(from);
  }

  inline ReadReturn& operator=(const ReadReturn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadReturn& operator=(ReadReturn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReadReturn& default_instance();

  static inline const ReadReturn* internal_default_instance() {
    return reinterpret_cast<const ReadReturn*>(
               &_ReadReturn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReadReturn& a, ReadReturn& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadReturn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadReturn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReadReturn* New() const final {
    return CreateMaybeMessage<ReadReturn>(nullptr);
  }

  ReadReturn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReadReturn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReadReturn& from);
  void MergeFrom(const ReadReturn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadReturn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.ReadReturn";
  }
  protected:
  explicit ReadReturn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kTxidFieldNumber = 1,
    kLastCommittedFieldNumber = 4,
    kMostRecentFieldNumber = 5,
  };
  // required string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 lastCommitted = 4;
  bool has_lastcommitted() const;
  private:
  bool _internal_has_lastcommitted() const;
  public:
  void clear_lastcommitted();
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted() const;
  void set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lastcommitted() const;
  void _internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool mostRecent = 5;
  bool has_mostrecent() const;
  private:
  bool _internal_has_mostrecent() const;
  public:
  void clear_mostrecent();
  bool mostrecent() const;
  void set_mostrecent(bool value);
  private:
  bool _internal_mostrecent() const;
  void _internal_set_mostrecent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:score.ReadReturn)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lastcommitted_;
  bool mostrecent_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Prepare_ReadSetElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.Prepare.ReadSetElement) */ {
 public:
  inline Prepare_ReadSetElement() : Prepare_ReadSetElement(nullptr) {}
  virtual ~Prepare_ReadSetElement();

  Prepare_ReadSetElement(const Prepare_ReadSetElement& from);
  Prepare_ReadSetElement(Prepare_ReadSetElement&& from) noexcept
    : Prepare_ReadSetElement() {
    *this = ::std::move(from);
  }

  inline Prepare_ReadSetElement& operator=(const Prepare_ReadSetElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare_ReadSetElement& operator=(Prepare_ReadSetElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prepare_ReadSetElement& default_instance();

  static inline const Prepare_ReadSetElement* internal_default_instance() {
    return reinterpret_cast<const Prepare_ReadSetElement*>(
               &_Prepare_ReadSetElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Prepare_ReadSetElement& a, Prepare_ReadSetElement& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare_ReadSetElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prepare_ReadSetElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare_ReadSetElement* New() const final {
    return CreateMaybeMessage<Prepare_ReadSetElement>(nullptr);
  }

  Prepare_ReadSetElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare_ReadSetElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prepare_ReadSetElement& from);
  void MergeFrom(const Prepare_ReadSetElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prepare_ReadSetElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.Prepare.ReadSetElement";
  }
  protected:
  explicit Prepare_ReadSetElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kVerFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required uint64 ver = 2;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  ::PROTOBUF_NAMESPACE_ID::uint64 ver() const;
  void set_ver(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ver() const;
  void _internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:score.Prepare.ReadSetElement)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ver_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Prepare_WriteSetElement PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.Prepare.WriteSetElement) */ {
 public:
  inline Prepare_WriteSetElement() : Prepare_WriteSetElement(nullptr) {}
  virtual ~Prepare_WriteSetElement();

  Prepare_WriteSetElement(const Prepare_WriteSetElement& from);
  Prepare_WriteSetElement(Prepare_WriteSetElement&& from) noexcept
    : Prepare_WriteSetElement() {
    *this = ::std::move(from);
  }

  inline Prepare_WriteSetElement& operator=(const Prepare_WriteSetElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare_WriteSetElement& operator=(Prepare_WriteSetElement&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prepare_WriteSetElement& default_instance();

  static inline const Prepare_WriteSetElement* internal_default_instance() {
    return reinterpret_cast<const Prepare_WriteSetElement*>(
               &_Prepare_WriteSetElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Prepare_WriteSetElement& a, Prepare_WriteSetElement& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare_WriteSetElement* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prepare_WriteSetElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare_WriteSetElement* New() const final {
    return CreateMaybeMessage<Prepare_WriteSetElement>(nullptr);
  }

  Prepare_WriteSetElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare_WriteSetElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prepare_WriteSetElement& from);
  void MergeFrom(const Prepare_WriteSetElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prepare_WriteSetElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.Prepare.WriteSetElement";
  }
  protected:
  explicit Prepare_WriteSetElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:score.Prepare.WriteSetElement)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Prepare PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.Prepare) */ {
 public:
  inline Prepare() : Prepare(nullptr) {}
  virtual ~Prepare();

  Prepare(const Prepare& from);
  Prepare(Prepare&& from) noexcept
    : Prepare() {
    *this = ::std::move(from);
  }

  inline Prepare& operator=(const Prepare& from) {
    CopyFrom(from);
    return *this;
  }
  inline Prepare& operator=(Prepare&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Prepare& default_instance();

  static inline const Prepare* internal_default_instance() {
    return reinterpret_cast<const Prepare*>(
               &_Prepare_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Prepare& a, Prepare& b) {
    a.Swap(&b);
  }
  inline void Swap(Prepare* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Prepare* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Prepare* New() const final {
    return CreateMaybeMessage<Prepare>(nullptr);
  }

  Prepare* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Prepare>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Prepare& from);
  void MergeFrom(const Prepare& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Prepare* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.Prepare";
  }
  protected:
  explicit Prepare(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Prepare_ReadSetElement ReadSetElement;
  typedef Prepare_WriteSetElement WriteSetElement;

  // accessors -------------------------------------------------------

  enum : int {
    kRsFieldNumber = 3,
    kWsFieldNumber = 4,
    kTxidFieldNumber = 1,
    kSidFieldNumber = 2,
  };
  // repeated .score.Prepare.ReadSetElement rs = 3;
  int rs_size() const;
  private:
  int _internal_rs_size() const;
  public:
  void clear_rs();
  ::score::Prepare_ReadSetElement* mutable_rs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_ReadSetElement >*
      mutable_rs();
  private:
  const ::score::Prepare_ReadSetElement& _internal_rs(int index) const;
  ::score::Prepare_ReadSetElement* _internal_add_rs();
  public:
  const ::score::Prepare_ReadSetElement& rs(int index) const;
  ::score::Prepare_ReadSetElement* add_rs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_ReadSetElement >&
      rs() const;

  // repeated .score.Prepare.WriteSetElement ws = 4;
  int ws_size() const;
  private:
  int _internal_ws_size() const;
  public:
  void clear_ws();
  ::score::Prepare_WriteSetElement* mutable_ws(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_WriteSetElement >*
      mutable_ws();
  private:
  const ::score::Prepare_WriteSetElement& _internal_ws(int index) const;
  ::score::Prepare_WriteSetElement* _internal_add_ws();
  public:
  const ::score::Prepare_WriteSetElement& ws(int index) const;
  ::score::Prepare_WriteSetElement* add_ws();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_WriteSetElement >&
      ws() const;

  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 sid = 2;
  bool has_sid() const;
  private:
  bool _internal_has_sid() const;
  public:
  void clear_sid();
  ::PROTOBUF_NAMESPACE_ID::uint64 sid() const;
  void set_sid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sid() const;
  void _internal_set_sid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:score.Prepare)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_ReadSetElement > rs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_WriteSetElement > ws_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sid_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Vote PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.Vote) */ {
 public:
  inline Vote() : Vote(nullptr) {}
  virtual ~Vote();

  Vote(const Vote& from);
  Vote(Vote&& from) noexcept
    : Vote() {
    *this = ::std::move(from);
  }

  inline Vote& operator=(const Vote& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vote& operator=(Vote&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vote& default_instance();

  static inline const Vote* internal_default_instance() {
    return reinterpret_cast<const Vote*>(
               &_Vote_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Vote& a, Vote& b) {
    a.Swap(&b);
  }
  inline void Swap(Vote* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vote* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vote* New() const final {
    return CreateMaybeMessage<Vote>(nullptr);
  }

  Vote* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vote>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vote& from);
  void MergeFrom(const Vote& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vote* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.Vote";
  }
  protected:
  explicit Vote(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
    kSnFieldNumber = 2,
    kOutcomeFieldNumber = 3,
  };
  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 sn = 2;
  bool has_sn() const;
  private:
  bool _internal_has_sn() const;
  public:
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::uint64 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool outcome = 3;
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  bool outcome() const;
  void set_outcome(bool value);
  private:
  bool _internal_outcome() const;
  void _internal_set_outcome(bool value);
  public:

  // @@protoc_insertion_point(class_scope:score.Vote)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 sn_;
  bool outcome_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Decide PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.Decide) */ {
 public:
  inline Decide() : Decide(nullptr) {}
  virtual ~Decide();

  Decide(const Decide& from);
  Decide(Decide&& from) noexcept
    : Decide() {
    *this = ::std::move(from);
  }

  inline Decide& operator=(const Decide& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decide& operator=(Decide&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decide& default_instance();

  static inline const Decide* internal_default_instance() {
    return reinterpret_cast<const Decide*>(
               &_Decide_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Decide& a, Decide& b) {
    a.Swap(&b);
  }
  inline void Swap(Decide* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decide* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decide* New() const final {
    return CreateMaybeMessage<Decide>(nullptr);
  }

  Decide* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decide>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decide& from);
  void MergeFrom(const Decide& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decide* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.Decide";
  }
  protected:
  explicit Decide(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxidFieldNumber = 1,
    kFsnFieldNumber = 2,
    kOutcomeFieldNumber = 3,
  };
  // required uint64 txid = 1;
  bool has_txid() const;
  private:
  bool _internal_has_txid() const;
  public:
  void clear_txid();
  ::PROTOBUF_NAMESPACE_ID::uint64 txid() const;
  void set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_txid() const;
  void _internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint64 fsn = 2;
  bool has_fsn() const;
  private:
  bool _internal_has_fsn() const;
  public:
  void clear_fsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 fsn() const;
  void set_fsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fsn() const;
  void _internal_set_fsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required bool outcome = 3;
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  bool outcome() const;
  void set_outcome(bool value);
  private:
  bool _internal_outcome() const;
  void _internal_set_outcome(bool value);
  public:

  // @@protoc_insertion_point(class_scope:score.Decide)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 txid_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fsn_;
  bool outcome_;
  friend struct ::TableStruct_protocol_2eproto;
};
// -------------------------------------------------------------------

class Committed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:score.Committed) */ {
 public:
  inline Committed() : Committed(nullptr) {}
  virtual ~Committed();

  Committed(const Committed& from);
  Committed(Committed&& from) noexcept
    : Committed() {
    *this = ::std::move(from);
  }

  inline Committed& operator=(const Committed& from) {
    CopyFrom(from);
    return *this;
  }
  inline Committed& operator=(Committed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Committed& default_instance();

  static inline const Committed* internal_default_instance() {
    return reinterpret_cast<const Committed*>(
               &_Committed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Committed& a, Committed& b) {
    a.Swap(&b);
  }
  inline void Swap(Committed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Committed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Committed* New() const final {
    return CreateMaybeMessage<Committed>(nullptr);
  }

  Committed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Committed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Committed& from);
  void MergeFrom(const Committed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Committed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "score.Committed";
  }
  protected:
  explicit Committed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // required bool success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:score.Committed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool success_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// TxIDMsg

// required uint64 txid = 1;
inline bool TxIDMsg::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TxIDMsg::has_txid() const {
  return _internal_has_txid();
}
inline void TxIDMsg::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxIDMsg::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxIDMsg::txid() const {
  // @@protoc_insertion_point(field_get:score.TxIDMsg.txid)
  return _internal_txid();
}
inline void TxIDMsg::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  txid_ = value;
}
inline void TxIDMsg::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.TxIDMsg.txid)
}

// -------------------------------------------------------------------

// ReadOperation

// required uint64 txid = 1;
inline bool ReadOperation::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadOperation::has_txid() const {
  return _internal_has_txid();
}
inline void ReadOperation::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadOperation::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadOperation::txid() const {
  // @@protoc_insertion_point(field_get:score.ReadOperation.txid)
  return _internal_txid();
}
inline void ReadOperation::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  txid_ = value;
}
inline void ReadOperation::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.ReadOperation.txid)
}

// required string key = 2;
inline bool ReadOperation::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadOperation::has_key() const {
  return _internal_has_key();
}
inline void ReadOperation::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadOperation::key() const {
  // @@protoc_insertion_point(field_get:score.ReadOperation.key)
  return _internal_key();
}
inline void ReadOperation::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:score.ReadOperation.key)
}
inline std::string* ReadOperation::mutable_key() {
  // @@protoc_insertion_point(field_mutable:score.ReadOperation.key)
  return _internal_mutable_key();
}
inline const std::string& ReadOperation::_internal_key() const {
  return key_.Get();
}
inline void ReadOperation::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadOperation::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.ReadOperation.key)
}
inline void ReadOperation::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.ReadOperation.key)
}
inline void ReadOperation::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.ReadOperation.key)
}
inline std::string* ReadOperation::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadOperation::release_key() {
  // @@protoc_insertion_point(field_release:score.ReadOperation.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadOperation::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.ReadOperation.key)
}

// -------------------------------------------------------------------

// ReadOperationResponse

// required uint64 txid = 1;
inline bool ReadOperationResponse::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadOperationResponse::has_txid() const {
  return _internal_has_txid();
}
inline void ReadOperationResponse::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadOperationResponse::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadOperationResponse::txid() const {
  // @@protoc_insertion_point(field_get:score.ReadOperationResponse.txid)
  return _internal_txid();
}
inline void ReadOperationResponse::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  txid_ = value;
}
inline void ReadOperationResponse::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.ReadOperationResponse.txid)
}

// required string value = 2;
inline bool ReadOperationResponse::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadOperationResponse::has_value() const {
  return _internal_has_value();
}
inline void ReadOperationResponse::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadOperationResponse::value() const {
  // @@protoc_insertion_point(field_get:score.ReadOperationResponse.value)
  return _internal_value();
}
inline void ReadOperationResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:score.ReadOperationResponse.value)
}
inline std::string* ReadOperationResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:score.ReadOperationResponse.value)
  return _internal_mutable_value();
}
inline const std::string& ReadOperationResponse::_internal_value() const {
  return value_.Get();
}
inline void ReadOperationResponse::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadOperationResponse::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.ReadOperationResponse.value)
}
inline void ReadOperationResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.ReadOperationResponse.value)
}
inline void ReadOperationResponse::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.ReadOperationResponse.value)
}
inline std::string* ReadOperationResponse::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadOperationResponse::release_value() {
  // @@protoc_insertion_point(field_release:score.ReadOperationResponse.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadOperationResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.ReadOperationResponse.value)
}

// required bool aborted = 3;
inline bool ReadOperationResponse::_internal_has_aborted() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReadOperationResponse::has_aborted() const {
  return _internal_has_aborted();
}
inline void ReadOperationResponse::clear_aborted() {
  aborted_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ReadOperationResponse::_internal_aborted() const {
  return aborted_;
}
inline bool ReadOperationResponse::aborted() const {
  // @@protoc_insertion_point(field_get:score.ReadOperationResponse.aborted)
  return _internal_aborted();
}
inline void ReadOperationResponse::_internal_set_aborted(bool value) {
  _has_bits_[0] |= 0x00000004u;
  aborted_ = value;
}
inline void ReadOperationResponse::set_aborted(bool value) {
  _internal_set_aborted(value);
  // @@protoc_insertion_point(field_set:score.ReadOperationResponse.aborted)
}

// -------------------------------------------------------------------

// WriteOperation

// required uint64 txid = 1;
inline bool WriteOperation::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WriteOperation::has_txid() const {
  return _internal_has_txid();
}
inline void WriteOperation::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteOperation::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteOperation::txid() const {
  // @@protoc_insertion_point(field_get:score.WriteOperation.txid)
  return _internal_txid();
}
inline void WriteOperation::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  txid_ = value;
}
inline void WriteOperation::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.WriteOperation.txid)
}

// required string key = 2;
inline bool WriteOperation::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteOperation::has_key() const {
  return _internal_has_key();
}
inline void WriteOperation::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& WriteOperation::key() const {
  // @@protoc_insertion_point(field_get:score.WriteOperation.key)
  return _internal_key();
}
inline void WriteOperation::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:score.WriteOperation.key)
}
inline std::string* WriteOperation::mutable_key() {
  // @@protoc_insertion_point(field_mutable:score.WriteOperation.key)
  return _internal_mutable_key();
}
inline const std::string& WriteOperation::_internal_key() const {
  return key_.Get();
}
inline void WriteOperation::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteOperation::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.WriteOperation.key)
}
inline void WriteOperation::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.WriteOperation.key)
}
inline void WriteOperation::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.WriteOperation.key)
}
inline std::string* WriteOperation::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteOperation::release_key() {
  // @@protoc_insertion_point(field_release:score.WriteOperation.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteOperation::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.WriteOperation.key)
}

// required string value = 3;
inline bool WriteOperation::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WriteOperation::has_value() const {
  return _internal_has_value();
}
inline void WriteOperation::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& WriteOperation::value() const {
  // @@protoc_insertion_point(field_get:score.WriteOperation.value)
  return _internal_value();
}
inline void WriteOperation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:score.WriteOperation.value)
}
inline std::string* WriteOperation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:score.WriteOperation.value)
  return _internal_mutable_value();
}
inline const std::string& WriteOperation::_internal_value() const {
  return value_.Get();
}
inline void WriteOperation::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WriteOperation::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.WriteOperation.value)
}
inline void WriteOperation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.WriteOperation.value)
}
inline void WriteOperation::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.WriteOperation.value)
}
inline std::string* WriteOperation::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WriteOperation::release_value() {
  // @@protoc_insertion_point(field_release:score.WriteOperation.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WriteOperation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.WriteOperation.value)
}

// -------------------------------------------------------------------

// WriteOperationResponse

// optional uint64 txid = 1;
inline bool WriteOperationResponse::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WriteOperationResponse::has_txid() const {
  return _internal_has_txid();
}
inline void WriteOperationResponse::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteOperationResponse::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 WriteOperationResponse::txid() const {
  // @@protoc_insertion_point(field_get:score.WriteOperationResponse.txid)
  return _internal_txid();
}
inline void WriteOperationResponse::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  txid_ = value;
}
inline void WriteOperationResponse::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.WriteOperationResponse.txid)
}

// -------------------------------------------------------------------

// TxOperationResponse

// optional string value = 3;
inline bool TxOperationResponse::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TxOperationResponse::has_value() const {
  return _internal_has_value();
}
inline void TxOperationResponse::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TxOperationResponse::value() const {
  // @@protoc_insertion_point(field_get:score.TxOperationResponse.value)
  return _internal_value();
}
inline void TxOperationResponse::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:score.TxOperationResponse.value)
}
inline std::string* TxOperationResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable:score.TxOperationResponse.value)
  return _internal_mutable_value();
}
inline const std::string& TxOperationResponse::_internal_value() const {
  return value_.Get();
}
inline void TxOperationResponse::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TxOperationResponse::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.TxOperationResponse.value)
}
inline void TxOperationResponse::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.TxOperationResponse.value)
}
inline void TxOperationResponse::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.TxOperationResponse.value)
}
inline std::string* TxOperationResponse::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TxOperationResponse::release_value() {
  // @@protoc_insertion_point(field_release:score.TxOperationResponse.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TxOperationResponse::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.TxOperationResponse.value)
}

// optional uint64 txid = 4;
inline bool TxOperationResponse::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TxOperationResponse::has_txid() const {
  return _internal_has_txid();
}
inline void TxOperationResponse::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxOperationResponse::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TxOperationResponse::txid() const {
  // @@protoc_insertion_point(field_get:score.TxOperationResponse.txid)
  return _internal_txid();
}
inline void TxOperationResponse::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  txid_ = value;
}
inline void TxOperationResponse::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.TxOperationResponse.txid)
}

// -------------------------------------------------------------------

// ReadRequest

// required uint64 txid = 1;
inline bool ReadRequest::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadRequest::has_txid() const {
  return _internal_has_txid();
}
inline void ReadRequest::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::txid() const {
  // @@protoc_insertion_point(field_get:score.ReadRequest.txid)
  return _internal_txid();
}
inline void ReadRequest::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  txid_ = value;
}
inline void ReadRequest::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.ReadRequest.txid)
}

// required string key = 2;
inline bool ReadRequest::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadRequest::has_key() const {
  return _internal_has_key();
}
inline void ReadRequest::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadRequest::key() const {
  // @@protoc_insertion_point(field_get:score.ReadRequest.key)
  return _internal_key();
}
inline void ReadRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:score.ReadRequest.key)
}
inline std::string* ReadRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:score.ReadRequest.key)
  return _internal_mutable_key();
}
inline const std::string& ReadRequest::_internal_key() const {
  return key_.Get();
}
inline void ReadRequest::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadRequest::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.ReadRequest.key)
}
inline std::string* ReadRequest::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadRequest::release_key() {
  // @@protoc_insertion_point(field_release:score.ReadRequest.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.ReadRequest.key)
}

// required uint64 readSid = 3;
inline bool ReadRequest::_internal_has_readsid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReadRequest::has_readsid() const {
  return _internal_has_readsid();
}
inline void ReadRequest::clear_readsid() {
  readsid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::_internal_readsid() const {
  return readsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadRequest::readsid() const {
  // @@protoc_insertion_point(field_get:score.ReadRequest.readSid)
  return _internal_readsid();
}
inline void ReadRequest::_internal_set_readsid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  readsid_ = value;
}
inline void ReadRequest::set_readsid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_readsid(value);
  // @@protoc_insertion_point(field_set:score.ReadRequest.readSid)
}

// required bool firstRead = 4;
inline bool ReadRequest::_internal_has_firstread() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReadRequest::has_firstread() const {
  return _internal_has_firstread();
}
inline void ReadRequest::clear_firstread() {
  firstread_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ReadRequest::_internal_firstread() const {
  return firstread_;
}
inline bool ReadRequest::firstread() const {
  // @@protoc_insertion_point(field_get:score.ReadRequest.firstRead)
  return _internal_firstread();
}
inline void ReadRequest::_internal_set_firstread(bool value) {
  _has_bits_[0] |= 0x00000008u;
  firstread_ = value;
}
inline void ReadRequest::set_firstread(bool value) {
  _internal_set_firstread(value);
  // @@protoc_insertion_point(field_set:score.ReadRequest.firstRead)
}

// -------------------------------------------------------------------

// ReadReturn

// required uint64 txid = 1;
inline bool ReadReturn::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ReadReturn::has_txid() const {
  return _internal_has_txid();
}
inline void ReadReturn::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReturn::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReturn::txid() const {
  // @@protoc_insertion_point(field_get:score.ReadReturn.txid)
  return _internal_txid();
}
inline void ReadReturn::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  txid_ = value;
}
inline void ReadReturn::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.ReadReturn.txid)
}

// required string key = 2;
inline bool ReadReturn::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ReadReturn::has_key() const {
  return _internal_has_key();
}
inline void ReadReturn::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ReadReturn::key() const {
  // @@protoc_insertion_point(field_get:score.ReadReturn.key)
  return _internal_key();
}
inline void ReadReturn::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:score.ReadReturn.key)
}
inline std::string* ReadReturn::mutable_key() {
  // @@protoc_insertion_point(field_mutable:score.ReadReturn.key)
  return _internal_mutable_key();
}
inline const std::string& ReadReturn::_internal_key() const {
  return key_.Get();
}
inline void ReadReturn::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadReturn::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.ReadReturn.key)
}
inline void ReadReturn::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.ReadReturn.key)
}
inline void ReadReturn::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.ReadReturn.key)
}
inline std::string* ReadReturn::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadReturn::release_key() {
  // @@protoc_insertion_point(field_release:score.ReadReturn.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReturn::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.ReadReturn.key)
}

// required string value = 3;
inline bool ReadReturn::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ReadReturn::has_value() const {
  return _internal_has_value();
}
inline void ReadReturn::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ReadReturn::value() const {
  // @@protoc_insertion_point(field_get:score.ReadReturn.value)
  return _internal_value();
}
inline void ReadReturn::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:score.ReadReturn.value)
}
inline std::string* ReadReturn::mutable_value() {
  // @@protoc_insertion_point(field_mutable:score.ReadReturn.value)
  return _internal_mutable_value();
}
inline const std::string& ReadReturn::_internal_value() const {
  return value_.Get();
}
inline void ReadReturn::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReadReturn::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.ReadReturn.value)
}
inline void ReadReturn::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.ReadReturn.value)
}
inline void ReadReturn::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.ReadReturn.value)
}
inline std::string* ReadReturn::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReadReturn::release_value() {
  // @@protoc_insertion_point(field_release:score.ReadReturn.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReadReturn::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.ReadReturn.value)
}

// required uint64 lastCommitted = 4;
inline bool ReadReturn::_internal_has_lastcommitted() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ReadReturn::has_lastcommitted() const {
  return _internal_has_lastcommitted();
}
inline void ReadReturn::clear_lastcommitted() {
  lastcommitted_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReturn::_internal_lastcommitted() const {
  return lastcommitted_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ReadReturn::lastcommitted() const {
  // @@protoc_insertion_point(field_get:score.ReadReturn.lastCommitted)
  return _internal_lastcommitted();
}
inline void ReadReturn::_internal_set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  lastcommitted_ = value;
}
inline void ReadReturn::set_lastcommitted(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lastcommitted(value);
  // @@protoc_insertion_point(field_set:score.ReadReturn.lastCommitted)
}

// required bool mostRecent = 5;
inline bool ReadReturn::_internal_has_mostrecent() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ReadReturn::has_mostrecent() const {
  return _internal_has_mostrecent();
}
inline void ReadReturn::clear_mostrecent() {
  mostrecent_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ReadReturn::_internal_mostrecent() const {
  return mostrecent_;
}
inline bool ReadReturn::mostrecent() const {
  // @@protoc_insertion_point(field_get:score.ReadReturn.mostRecent)
  return _internal_mostrecent();
}
inline void ReadReturn::_internal_set_mostrecent(bool value) {
  _has_bits_[0] |= 0x00000010u;
  mostrecent_ = value;
}
inline void ReadReturn::set_mostrecent(bool value) {
  _internal_set_mostrecent(value);
  // @@protoc_insertion_point(field_set:score.ReadReturn.mostRecent)
}

// -------------------------------------------------------------------

// Prepare_ReadSetElement

// required string key = 1;
inline bool Prepare_ReadSetElement::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Prepare_ReadSetElement::has_key() const {
  return _internal_has_key();
}
inline void Prepare_ReadSetElement::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Prepare_ReadSetElement::key() const {
  // @@protoc_insertion_point(field_get:score.Prepare.ReadSetElement.key)
  return _internal_key();
}
inline void Prepare_ReadSetElement::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:score.Prepare.ReadSetElement.key)
}
inline std::string* Prepare_ReadSetElement::mutable_key() {
  // @@protoc_insertion_point(field_mutable:score.Prepare.ReadSetElement.key)
  return _internal_mutable_key();
}
inline const std::string& Prepare_ReadSetElement::_internal_key() const {
  return key_.Get();
}
inline void Prepare_ReadSetElement::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Prepare_ReadSetElement::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.Prepare.ReadSetElement.key)
}
inline void Prepare_ReadSetElement::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.Prepare.ReadSetElement.key)
}
inline void Prepare_ReadSetElement::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.Prepare.ReadSetElement.key)
}
inline std::string* Prepare_ReadSetElement::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Prepare_ReadSetElement::release_key() {
  // @@protoc_insertion_point(field_release:score.Prepare.ReadSetElement.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prepare_ReadSetElement::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.Prepare.ReadSetElement.key)
}

// required uint64 ver = 2;
inline bool Prepare_ReadSetElement::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Prepare_ReadSetElement::has_ver() const {
  return _internal_has_ver();
}
inline void Prepare_ReadSetElement::clear_ver() {
  ver_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare_ReadSetElement::_internal_ver() const {
  return ver_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare_ReadSetElement::ver() const {
  // @@protoc_insertion_point(field_get:score.Prepare.ReadSetElement.ver)
  return _internal_ver();
}
inline void Prepare_ReadSetElement::_internal_set_ver(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  ver_ = value;
}
inline void Prepare_ReadSetElement::set_ver(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:score.Prepare.ReadSetElement.ver)
}

// -------------------------------------------------------------------

// Prepare_WriteSetElement

// required string key = 1;
inline bool Prepare_WriteSetElement::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Prepare_WriteSetElement::has_key() const {
  return _internal_has_key();
}
inline void Prepare_WriteSetElement::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Prepare_WriteSetElement::key() const {
  // @@protoc_insertion_point(field_get:score.Prepare.WriteSetElement.key)
  return _internal_key();
}
inline void Prepare_WriteSetElement::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:score.Prepare.WriteSetElement.key)
}
inline std::string* Prepare_WriteSetElement::mutable_key() {
  // @@protoc_insertion_point(field_mutable:score.Prepare.WriteSetElement.key)
  return _internal_mutable_key();
}
inline const std::string& Prepare_WriteSetElement::_internal_key() const {
  return key_.Get();
}
inline void Prepare_WriteSetElement::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Prepare_WriteSetElement::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.Prepare.WriteSetElement.key)
}
inline void Prepare_WriteSetElement::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.Prepare.WriteSetElement.key)
}
inline void Prepare_WriteSetElement::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.Prepare.WriteSetElement.key)
}
inline std::string* Prepare_WriteSetElement::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Prepare_WriteSetElement::release_key() {
  // @@protoc_insertion_point(field_release:score.Prepare.WriteSetElement.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prepare_WriteSetElement::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.Prepare.WriteSetElement.key)
}

// required string value = 2;
inline bool Prepare_WriteSetElement::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Prepare_WriteSetElement::has_value() const {
  return _internal_has_value();
}
inline void Prepare_WriteSetElement::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Prepare_WriteSetElement::value() const {
  // @@protoc_insertion_point(field_get:score.Prepare.WriteSetElement.value)
  return _internal_value();
}
inline void Prepare_WriteSetElement::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:score.Prepare.WriteSetElement.value)
}
inline std::string* Prepare_WriteSetElement::mutable_value() {
  // @@protoc_insertion_point(field_mutable:score.Prepare.WriteSetElement.value)
  return _internal_mutable_value();
}
inline const std::string& Prepare_WriteSetElement::_internal_value() const {
  return value_.Get();
}
inline void Prepare_WriteSetElement::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Prepare_WriteSetElement::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:score.Prepare.WriteSetElement.value)
}
inline void Prepare_WriteSetElement::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:score.Prepare.WriteSetElement.value)
}
inline void Prepare_WriteSetElement::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:score.Prepare.WriteSetElement.value)
}
inline std::string* Prepare_WriteSetElement::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Prepare_WriteSetElement::release_value() {
  // @@protoc_insertion_point(field_release:score.Prepare.WriteSetElement.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Prepare_WriteSetElement::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:score.Prepare.WriteSetElement.value)
}

// -------------------------------------------------------------------

// Prepare

// required uint64 txid = 1;
inline bool Prepare::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Prepare::has_txid() const {
  return _internal_has_txid();
}
inline void Prepare::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::txid() const {
  // @@protoc_insertion_point(field_get:score.Prepare.txid)
  return _internal_txid();
}
inline void Prepare::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  txid_ = value;
}
inline void Prepare::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.Prepare.txid)
}

// required uint64 sid = 2;
inline bool Prepare::_internal_has_sid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Prepare::has_sid() const {
  return _internal_has_sid();
}
inline void Prepare::clear_sid() {
  sid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::_internal_sid() const {
  return sid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Prepare::sid() const {
  // @@protoc_insertion_point(field_get:score.Prepare.sid)
  return _internal_sid();
}
inline void Prepare::_internal_set_sid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sid_ = value;
}
inline void Prepare::set_sid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sid(value);
  // @@protoc_insertion_point(field_set:score.Prepare.sid)
}

// repeated .score.Prepare.ReadSetElement rs = 3;
inline int Prepare::_internal_rs_size() const {
  return rs_.size();
}
inline int Prepare::rs_size() const {
  return _internal_rs_size();
}
inline void Prepare::clear_rs() {
  rs_.Clear();
}
inline ::score::Prepare_ReadSetElement* Prepare::mutable_rs(int index) {
  // @@protoc_insertion_point(field_mutable:score.Prepare.rs)
  return rs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_ReadSetElement >*
Prepare::mutable_rs() {
  // @@protoc_insertion_point(field_mutable_list:score.Prepare.rs)
  return &rs_;
}
inline const ::score::Prepare_ReadSetElement& Prepare::_internal_rs(int index) const {
  return rs_.Get(index);
}
inline const ::score::Prepare_ReadSetElement& Prepare::rs(int index) const {
  // @@protoc_insertion_point(field_get:score.Prepare.rs)
  return _internal_rs(index);
}
inline ::score::Prepare_ReadSetElement* Prepare::_internal_add_rs() {
  return rs_.Add();
}
inline ::score::Prepare_ReadSetElement* Prepare::add_rs() {
  // @@protoc_insertion_point(field_add:score.Prepare.rs)
  return _internal_add_rs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_ReadSetElement >&
Prepare::rs() const {
  // @@protoc_insertion_point(field_list:score.Prepare.rs)
  return rs_;
}

// repeated .score.Prepare.WriteSetElement ws = 4;
inline int Prepare::_internal_ws_size() const {
  return ws_.size();
}
inline int Prepare::ws_size() const {
  return _internal_ws_size();
}
inline void Prepare::clear_ws() {
  ws_.Clear();
}
inline ::score::Prepare_WriteSetElement* Prepare::mutable_ws(int index) {
  // @@protoc_insertion_point(field_mutable:score.Prepare.ws)
  return ws_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_WriteSetElement >*
Prepare::mutable_ws() {
  // @@protoc_insertion_point(field_mutable_list:score.Prepare.ws)
  return &ws_;
}
inline const ::score::Prepare_WriteSetElement& Prepare::_internal_ws(int index) const {
  return ws_.Get(index);
}
inline const ::score::Prepare_WriteSetElement& Prepare::ws(int index) const {
  // @@protoc_insertion_point(field_get:score.Prepare.ws)
  return _internal_ws(index);
}
inline ::score::Prepare_WriteSetElement* Prepare::_internal_add_ws() {
  return ws_.Add();
}
inline ::score::Prepare_WriteSetElement* Prepare::add_ws() {
  // @@protoc_insertion_point(field_add:score.Prepare.ws)
  return _internal_add_ws();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::score::Prepare_WriteSetElement >&
Prepare::ws() const {
  // @@protoc_insertion_point(field_list:score.Prepare.ws)
  return ws_;
}

// -------------------------------------------------------------------

// Vote

// required uint64 txid = 1;
inline bool Vote::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Vote::has_txid() const {
  return _internal_has_txid();
}
inline void Vote::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vote::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vote::txid() const {
  // @@protoc_insertion_point(field_get:score.Vote.txid)
  return _internal_txid();
}
inline void Vote::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  txid_ = value;
}
inline void Vote::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.Vote.txid)
}

// required uint64 sn = 2;
inline bool Vote::_internal_has_sn() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Vote::has_sn() const {
  return _internal_has_sn();
}
inline void Vote::clear_sn() {
  sn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vote::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Vote::sn() const {
  // @@protoc_insertion_point(field_get:score.Vote.sn)
  return _internal_sn();
}
inline void Vote::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  sn_ = value;
}
inline void Vote::set_sn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:score.Vote.sn)
}

// required bool outcome = 3;
inline bool Vote::_internal_has_outcome() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Vote::has_outcome() const {
  return _internal_has_outcome();
}
inline void Vote::clear_outcome() {
  outcome_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Vote::_internal_outcome() const {
  return outcome_;
}
inline bool Vote::outcome() const {
  // @@protoc_insertion_point(field_get:score.Vote.outcome)
  return _internal_outcome();
}
inline void Vote::_internal_set_outcome(bool value) {
  _has_bits_[0] |= 0x00000004u;
  outcome_ = value;
}
inline void Vote::set_outcome(bool value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:score.Vote.outcome)
}

// -------------------------------------------------------------------

// Decide

// required uint64 txid = 1;
inline bool Decide::_internal_has_txid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Decide::has_txid() const {
  return _internal_has_txid();
}
inline void Decide::clear_txid() {
  txid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decide::_internal_txid() const {
  return txid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decide::txid() const {
  // @@protoc_insertion_point(field_get:score.Decide.txid)
  return _internal_txid();
}
inline void Decide::_internal_set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  txid_ = value;
}
inline void Decide::set_txid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_txid(value);
  // @@protoc_insertion_point(field_set:score.Decide.txid)
}

// required uint64 fsn = 2;
inline bool Decide::_internal_has_fsn() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Decide::has_fsn() const {
  return _internal_has_fsn();
}
inline void Decide::clear_fsn() {
  fsn_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decide::_internal_fsn() const {
  return fsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Decide::fsn() const {
  // @@protoc_insertion_point(field_get:score.Decide.fsn)
  return _internal_fsn();
}
inline void Decide::_internal_set_fsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  fsn_ = value;
}
inline void Decide::set_fsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fsn(value);
  // @@protoc_insertion_point(field_set:score.Decide.fsn)
}

// required bool outcome = 3;
inline bool Decide::_internal_has_outcome() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Decide::has_outcome() const {
  return _internal_has_outcome();
}
inline void Decide::clear_outcome() {
  outcome_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool Decide::_internal_outcome() const {
  return outcome_;
}
inline bool Decide::outcome() const {
  // @@protoc_insertion_point(field_get:score.Decide.outcome)
  return _internal_outcome();
}
inline void Decide::_internal_set_outcome(bool value) {
  _has_bits_[0] |= 0x00000004u;
  outcome_ = value;
}
inline void Decide::set_outcome(bool value) {
  _internal_set_outcome(value);
  // @@protoc_insertion_point(field_set:score.Decide.outcome)
}

// -------------------------------------------------------------------

// Committed

// required bool success = 1;
inline bool Committed::_internal_has_success() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Committed::has_success() const {
  return _internal_has_success();
}
inline void Committed::clear_success() {
  success_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool Committed::_internal_success() const {
  return success_;
}
inline bool Committed::success() const {
  // @@protoc_insertion_point(field_get:score.Committed.success)
  return _internal_success();
}
inline void Committed::_internal_set_success(bool value) {
  _has_bits_[0] |= 0x00000001u;
  success_ = value;
}
inline void Committed::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:score.Committed.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace score

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
