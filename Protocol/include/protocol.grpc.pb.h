// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protocol.proto
#ifndef GRPC_protocol_2eproto__INCLUDED
#define GRPC_protocol_2eproto__INCLUDED

#include "protocol.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace score {

//
// Use to send to server to work on transaction
//
// message TxOperation {
// enum OpType {
// START = 0;
// READ = 1;
// WRITE = 2;
// COMMIT = 3;
// ROLLBACK = 4;
// }
// required OpType opType = 1;
// optional string key = 2;
// optional string value = 3;
// optional uint64 txid = 4;
// }
//
class TxRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "score.TxRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartTx(::grpc::ClientContext* context, const ::score::Empty& request, ::score::TxIDMsg* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::TxIDMsg>> AsyncStartTx(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::TxIDMsg>>(AsyncStartTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::TxIDMsg>> PrepareAsyncStartTx(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::TxIDMsg>>(PrepareAsyncStartTxRaw(context, request, cq));
    }
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::score::ReadOperationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadOperationResponse>> AsyncRead(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadOperationResponse>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadOperationResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadOperationResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    virtual ::grpc::Status Write(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::score::WriteOperationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::WriteOperationResponse>> AsyncWrite(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::WriteOperationResponse>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::WriteOperationResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::WriteOperationResponse>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    virtual ::grpc::Status Commit(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::score::Committed* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>> AsyncCommit(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void StartTx(::grpc::ClientContext* context, const ::score::Empty* request, ::score::TxIDMsg* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void StartTx(::grpc::ClientContext* context, const ::score::Empty* request, ::score::TxIDMsg* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void StartTx(::grpc::ClientContext* context, const ::score::Empty* request, ::score::TxIDMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Read(::grpc::ClientContext* context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Read(::grpc::ClientContext* context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Read(::grpc::ClientContext* context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Write(::grpc::ClientContext* context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Write(::grpc::ClientContext* context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Write(::grpc::ClientContext* context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void Commit(::grpc::ClientContext* context, const ::score::TxIDMsg* request, ::score::Committed* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void Commit(::grpc::ClientContext* context, const ::score::TxIDMsg* request, ::score::Committed* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void Commit(::grpc::ClientContext* context, const ::score::TxIDMsg* request, ::score::Committed* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::TxIDMsg>* AsyncStartTxRaw(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::TxIDMsg>* PrepareAsyncStartTxRaw(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadOperationResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadOperationResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::WriteOperationResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::WriteOperationResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>* AsyncCommitRaw(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartTx(::grpc::ClientContext* context, const ::score::Empty& request, ::score::TxIDMsg* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::TxIDMsg>> AsyncStartTx(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::TxIDMsg>>(AsyncStartTxRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::TxIDMsg>> PrepareAsyncStartTx(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::TxIDMsg>>(PrepareAsyncStartTxRaw(context, request, cq));
    }
    ::grpc::Status Read(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::score::ReadOperationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadOperationResponse>> AsyncRead(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadOperationResponse>>(AsyncReadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadOperationResponse>> PrepareAsyncRead(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadOperationResponse>>(PrepareAsyncReadRaw(context, request, cq));
    }
    ::grpc::Status Write(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::score::WriteOperationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::WriteOperationResponse>> AsyncWrite(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::WriteOperationResponse>>(AsyncWriteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::WriteOperationResponse>> PrepareAsyncWrite(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::WriteOperationResponse>>(PrepareAsyncWriteRaw(context, request, cq));
    }
    ::grpc::Status Commit(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::score::Committed* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>> AsyncCommit(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>>(AsyncCommitRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>> PrepareAsyncCommit(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>>(PrepareAsyncCommitRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartTx(::grpc::ClientContext* context, const ::score::Empty* request, ::score::TxIDMsg* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void StartTx(::grpc::ClientContext* context, const ::score::Empty* request, ::score::TxIDMsg* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void StartTx(::grpc::ClientContext* context, const ::score::Empty* request, ::score::TxIDMsg* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Read(::grpc::ClientContext* context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Read(::grpc::ClientContext* context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Read(::grpc::ClientContext* context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Write(::grpc::ClientContext* context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Write(::grpc::ClientContext* context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Write(::grpc::ClientContext* context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void Commit(::grpc::ClientContext* context, const ::score::TxIDMsg* request, ::score::Committed* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void Commit(::grpc::ClientContext* context, const ::score::TxIDMsg* request, ::score::Committed* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void Commit(::grpc::ClientContext* context, const ::score::TxIDMsg* request, ::score::Committed* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::score::TxIDMsg>* AsyncStartTxRaw(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::TxIDMsg>* PrepareAsyncStartTxRaw(::grpc::ClientContext* context, const ::score::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::ReadOperationResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::ReadOperationResponse>* PrepareAsyncReadRaw(::grpc::ClientContext* context, const ::score::ReadOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::WriteOperationResponse>* AsyncWriteRaw(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::WriteOperationResponse>* PrepareAsyncWriteRaw(::grpc::ClientContext* context, const ::score::WriteOperation& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::Committed>* AsyncCommitRaw(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::Committed>* PrepareAsyncCommitRaw(::grpc::ClientContext* context, const ::score::TxIDMsg& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartTx_;
    const ::grpc::internal::RpcMethod rpcmethod_Read_;
    const ::grpc::internal::RpcMethod rpcmethod_Write_;
    const ::grpc::internal::RpcMethod rpcmethod_Commit_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartTx(::grpc::ServerContext* context, const ::score::Empty* request, ::score::TxIDMsg* response);
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response);
    virtual ::grpc::Status Write(::grpc::ServerContext* context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response);
    virtual ::grpc::Status Commit(::grpc::ServerContext* context, const ::score::TxIDMsg* request, ::score::Committed* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartTx() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTx(::grpc::ServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTx(::grpc::ServerContext* context, ::score::Empty* request, ::grpc::ServerAsyncResponseWriter< ::score::TxIDMsg>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::score::ReadOperation* request, ::grpc::ServerAsyncResponseWriter< ::score::ReadOperationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Write() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::score::WriteOperation* request, ::grpc::ServerAsyncResponseWriter< ::score::WriteOperationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Commit() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::score::TxIDMsg* request, ::grpc::ServerAsyncResponseWriter< ::score::Committed>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartTx<WithAsyncMethod_Read<WithAsyncMethod_Write<WithAsyncMethod_Commit<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_StartTx() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::score::Empty, ::score::TxIDMsg>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::score::Empty* request, ::score::TxIDMsg* response) { return this->StartTx(context, request, response); }));}
    void SetMessageAllocatorFor_StartTx(
        ::grpc::experimental::MessageAllocator< ::score::Empty, ::score::TxIDMsg>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::score::Empty, ::score::TxIDMsg>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTx(::grpc::ServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartTx(
      ::grpc::CallbackServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartTx(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::score::ReadOperation, ::score::ReadOperationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::score::ReadOperation* request, ::score::ReadOperationResponse* response) { return this->Read(context, request, response); }));}
    void SetMessageAllocatorFor_Read(
        ::grpc::experimental::MessageAllocator< ::score::ReadOperation, ::score::ReadOperationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::score::ReadOperation, ::score::ReadOperationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::score::WriteOperation, ::score::WriteOperationResponse>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::score::WriteOperation* request, ::score::WriteOperationResponse* response) { return this->Write(context, request, response); }));}
    void SetMessageAllocatorFor_Write(
        ::grpc::experimental::MessageAllocator< ::score::WriteOperation, ::score::WriteOperationResponse>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::score::WriteOperation, ::score::WriteOperationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_Commit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::score::TxIDMsg, ::score::Committed>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::score::TxIDMsg* request, ::score::Committed* response) { return this->Commit(context, request, response); }));}
    void SetMessageAllocatorFor_Commit(
        ::grpc::experimental::MessageAllocator< ::score::TxIDMsg, ::score::Committed>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::score::TxIDMsg, ::score::Committed>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Commit(
      ::grpc::CallbackServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Commit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_StartTx<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Commit<Service > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_StartTx<ExperimentalWithCallbackMethod_Read<ExperimentalWithCallbackMethod_Write<ExperimentalWithCallbackMethod_Commit<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartTx() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTx(::grpc::ServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Write() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Commit() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartTx() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTx(::grpc::ServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartTx(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Read() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Write() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWrite(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Commit() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCommit(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_StartTx() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartTx(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_StartTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartTx(::grpc::ServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* StartTx(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* StartTx(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Read() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Read(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Read(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Read(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Write() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Write(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Write(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Write(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_Commit() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Commit(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* Commit(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* Commit(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartTx : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartTx() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::score::Empty, ::score::TxIDMsg>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::score::Empty, ::score::TxIDMsg>* streamer) {
                       return this->StreamedStartTx(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartTx() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartTx(::grpc::ServerContext* /*context*/, const ::score::Empty* /*request*/, ::score::TxIDMsg* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartTx(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::score::Empty,::score::TxIDMsg>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::score::ReadOperation, ::score::ReadOperationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::score::ReadOperation, ::score::ReadOperationResponse>* streamer) {
                       return this->StreamedRead(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* /*context*/, const ::score::ReadOperation* /*request*/, ::score::ReadOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::score::ReadOperation,::score::ReadOperationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Write : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Write() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::score::WriteOperation, ::score::WriteOperationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::score::WriteOperation, ::score::WriteOperationResponse>* streamer) {
                       return this->StreamedWrite(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Write() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Write(::grpc::ServerContext* /*context*/, const ::score::WriteOperation* /*request*/, ::score::WriteOperationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedWrite(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::score::WriteOperation,::score::WriteOperationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Commit : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Commit() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::score::TxIDMsg, ::score::Committed>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::score::TxIDMsg, ::score::Committed>* streamer) {
                       return this->StreamedCommit(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Commit() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Commit(::grpc::ServerContext* /*context*/, const ::score::TxIDMsg* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCommit(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::score::TxIDMsg,::score::Committed>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartTx<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Commit<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartTx<WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Write<WithStreamedUnaryMethod_Commit<Service > > > > StreamedService;
};

class CControlRPC final {
 public:
  static constexpr char const* service_full_name() {
    return "score.CControlRPC";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::score::ReadReturn* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadReturn>> AsyncDoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadReturn>>(AsyncDoReadRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadReturn>> PrepareAsyncDoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadReturn>>(PrepareAsyncDoReadRequestRaw(context, request, cq));
    }
    virtual ::grpc::Status DoPrepare(::grpc::ClientContext* context, const ::score::Prepare& request, ::score::Vote* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Vote>> AsyncDoPrepare(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Vote>>(AsyncDoPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Vote>> PrepareAsyncDoPrepare(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Vote>>(PrepareAsyncDoPrepareRaw(context, request, cq));
    }
    virtual ::grpc::Status DoDecide(::grpc::ClientContext* context, const ::score::Decide& request, ::score::Committed* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>> AsyncDoDecide(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>>(AsyncDoDecideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>> PrepareAsyncDoDecide(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>>(PrepareAsyncDoDecideRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadReturn>* AsyncDoReadRequestRaw(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::ReadReturn>* PrepareAsyncDoReadRequestRaw(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::Vote>* AsyncDoPrepareRaw(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::Vote>* PrepareAsyncDoPrepareRaw(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>* AsyncDoDecideRaw(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::score::Committed>* PrepareAsyncDoDecideRaw(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::score::ReadReturn* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadReturn>> AsyncDoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadReturn>>(AsyncDoReadRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadReturn>> PrepareAsyncDoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::ReadReturn>>(PrepareAsyncDoReadRequestRaw(context, request, cq));
    }
    ::grpc::Status DoPrepare(::grpc::ClientContext* context, const ::score::Prepare& request, ::score::Vote* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Vote>> AsyncDoPrepare(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Vote>>(AsyncDoPrepareRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Vote>> PrepareAsyncDoPrepare(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Vote>>(PrepareAsyncDoPrepareRaw(context, request, cq));
    }
    ::grpc::Status DoDecide(::grpc::ClientContext* context, const ::score::Decide& request, ::score::Committed* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>> AsyncDoDecide(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>>(AsyncDoDecideRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>> PrepareAsyncDoDecide(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::score::Committed>>(PrepareAsyncDoDecideRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::score::ReadReturn>* AsyncDoReadRequestRaw(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::ReadReturn>* PrepareAsyncDoReadRequestRaw(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::Vote>* AsyncDoPrepareRaw(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::Vote>* PrepareAsyncDoPrepareRaw(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::Committed>* AsyncDoDecideRaw(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::score::Committed>* PrepareAsyncDoDecideRaw(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_DoReadRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_DoPrepare_;
    const ::grpc::internal::RpcMethod rpcmethod_DoDecide_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status DoReadRequest(::grpc::ServerContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response);
    virtual ::grpc::Status DoPrepare(::grpc::ServerContext* context, const ::score::Prepare* request, ::score::Vote* response);
    virtual ::grpc::Status DoDecide(::grpc::ServerContext* context, const ::score::Decide* request, ::score::Committed* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_DoReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoReadRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_DoReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReadRequest(::grpc::ServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoReadRequest(::grpc::ServerContext* context, ::score::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::score::ReadReturn>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoPrepare() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DoPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepare(::grpc::ServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoPrepare(::grpc::ServerContext* context, ::score::Prepare* request, ::grpc::ServerAsyncResponseWriter< ::score::Vote>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoDecide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoDecide() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DoDecide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDecide(::grpc::ServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoDecide(::grpc::ServerContext* context, ::score::Decide* request, ::grpc::ServerAsyncResponseWriter< ::score::Committed>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_DoReadRequest<WithAsyncMethod_DoPrepare<WithAsyncMethod_DoDecide<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoReadRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::score::ReadRequest, ::score::ReadReturn>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::score::ReadRequest* request, ::score::ReadReturn* response) { return this->DoReadRequest(context, request, response); }));}
    void SetMessageAllocatorFor_DoReadRequest(
        ::grpc::experimental::MessageAllocator< ::score::ReadRequest, ::score::ReadReturn>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::score::ReadRequest, ::score::ReadReturn>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReadRequest(::grpc::ServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoReadRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoReadRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoPrepare() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::score::Prepare, ::score::Vote>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::score::Prepare* request, ::score::Vote* response) { return this->DoPrepare(context, request, response); }));}
    void SetMessageAllocatorFor_DoPrepare(
        ::grpc::experimental::MessageAllocator< ::score::Prepare, ::score::Vote>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::score::Prepare, ::score::Vote>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepare(::grpc::ServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoPrepare(
      ::grpc::CallbackServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoPrepare(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DoDecide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_DoDecide() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::score::Decide, ::score::Committed>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::score::Decide* request, ::score::Committed* response) { return this->DoDecide(context, request, response); }));}
    void SetMessageAllocatorFor_DoDecide(
        ::grpc::experimental::MessageAllocator< ::score::Decide, ::score::Committed>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc::internal::CallbackUnaryHandler< ::score::Decide, ::score::Committed>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DoDecide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDecide(::grpc::ServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoDecide(
      ::grpc::CallbackServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoDecide(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_DoReadRequest<ExperimentalWithCallbackMethod_DoPrepare<ExperimentalWithCallbackMethod_DoDecide<Service > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_DoReadRequest<ExperimentalWithCallbackMethod_DoPrepare<ExperimentalWithCallbackMethod_DoDecide<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_DoReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoReadRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_DoReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReadRequest(::grpc::ServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoPrepare() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DoPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepare(::grpc::ServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoDecide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoDecide() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DoDecide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDecide(::grpc::ServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoReadRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_DoReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReadRequest(::grpc::ServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoReadRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoPrepare() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DoPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepare(::grpc::ServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoPrepare(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoDecide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoDecide() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DoDecide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDecide(::grpc::ServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoDecide(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoReadRequest() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoReadRequest(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoReadRequest(::grpc::ServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoReadRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoReadRequest(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoPrepare() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoPrepare(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoPrepare(::grpc::ServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoPrepare(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoPrepare(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DoDecide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_DoDecide() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoDecide(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_DoDecide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoDecide(::grpc::ServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* DoDecide(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* DoDecide(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoReadRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoReadRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::score::ReadRequest, ::score::ReadReturn>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::score::ReadRequest, ::score::ReadReturn>* streamer) {
                       return this->StreamedDoReadRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoReadRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoReadRequest(::grpc::ServerContext* /*context*/, const ::score::ReadRequest* /*request*/, ::score::ReadReturn* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoReadRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::score::ReadRequest,::score::ReadReturn>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoPrepare : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoPrepare() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::score::Prepare, ::score::Vote>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::score::Prepare, ::score::Vote>* streamer) {
                       return this->StreamedDoPrepare(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoPrepare() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoPrepare(::grpc::ServerContext* /*context*/, const ::score::Prepare* /*request*/, ::score::Vote* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoPrepare(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::score::Prepare,::score::Vote>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoDecide : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoDecide() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::score::Decide, ::score::Committed>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::score::Decide, ::score::Committed>* streamer) {
                       return this->StreamedDoDecide(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoDecide() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoDecide(::grpc::ServerContext* /*context*/, const ::score::Decide* /*request*/, ::score::Committed* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoDecide(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::score::Decide,::score::Committed>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_DoReadRequest<WithStreamedUnaryMethod_DoPrepare<WithStreamedUnaryMethod_DoDecide<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_DoReadRequest<WithStreamedUnaryMethod_DoPrepare<WithStreamedUnaryMethod_DoDecide<Service > > > StreamedService;
};

}  // namespace score


#endif  // GRPC_protocol_2eproto__INCLUDED
