// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protocol.proto

#include "protocol.pb.h"
#include "protocol.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace score {

static const char* CControlRPC_method_names[] = {
  "/score.CControlRPC/DoReadRequest",
  "/score.CControlRPC/DoPrepare",
  "/score.CControlRPC/DoDecide",
};

std::unique_ptr< CControlRPC::Stub> CControlRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CControlRPC::Stub> stub(new CControlRPC::Stub(channel));
  return stub;
}

CControlRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_DoReadRequest_(CControlRPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoPrepare_(CControlRPC_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DoDecide_(CControlRPC_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CControlRPC::Stub::DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::score::ReadReturn* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoReadRequest_, context, request, response);
}

void CControlRPC::Stub::experimental_async::DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoReadRequest_, context, request, response, std::move(f));
}

void CControlRPC::Stub::experimental_async::DoReadRequest(::grpc::ClientContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoReadRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::score::ReadReturn>* CControlRPC::Stub::PrepareAsyncDoReadRequestRaw(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::score::ReadReturn>::Create(channel_.get(), cq, rpcmethod_DoReadRequest_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::score::ReadReturn>* CControlRPC::Stub::AsyncDoReadRequestRaw(::grpc::ClientContext* context, const ::score::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoReadRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CControlRPC::Stub::DoPrepare(::grpc::ClientContext* context, const ::score::Prepare& request, ::score::Vote* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoPrepare_, context, request, response);
}

void CControlRPC::Stub::experimental_async::DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoPrepare_, context, request, response, std::move(f));
}

void CControlRPC::Stub::experimental_async::DoPrepare(::grpc::ClientContext* context, const ::score::Prepare* request, ::score::Vote* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoPrepare_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::score::Vote>* CControlRPC::Stub::PrepareAsyncDoPrepareRaw(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::score::Vote>::Create(channel_.get(), cq, rpcmethod_DoPrepare_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::score::Vote>* CControlRPC::Stub::AsyncDoPrepareRaw(::grpc::ClientContext* context, const ::score::Prepare& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoPrepareRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CControlRPC::Stub::DoDecide(::grpc::ClientContext* context, const ::score::Decide& request, ::score::Committed* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DoDecide_, context, request, response);
}

void CControlRPC::Stub::experimental_async::DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DoDecide_, context, request, response, std::move(f));
}

void CControlRPC::Stub::experimental_async::DoDecide(::grpc::ClientContext* context, const ::score::Decide* request, ::score::Committed* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DoDecide_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::score::Committed>* CControlRPC::Stub::PrepareAsyncDoDecideRaw(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::score::Committed>::Create(channel_.get(), cq, rpcmethod_DoDecide_, context, request, false);
}

::grpc::ClientAsyncResponseReader< ::score::Committed>* CControlRPC::Stub::AsyncDoDecideRaw(::grpc::ClientContext* context, const ::score::Decide& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDoDecideRaw(context, request, cq);
  result->StartCall();
  return result;
}

CControlRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CControlRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CControlRPC::Service, ::score::ReadRequest, ::score::ReadReturn>(
          [](CControlRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::score::ReadRequest* req,
             ::score::ReadReturn* resp) {
               return service->DoReadRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CControlRPC_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CControlRPC::Service, ::score::Prepare, ::score::Vote>(
          [](CControlRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::score::Prepare* req,
             ::score::Vote* resp) {
               return service->DoPrepare(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CControlRPC_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CControlRPC::Service, ::score::Decide, ::score::Committed>(
          [](CControlRPC::Service* service,
             ::grpc::ServerContext* ctx,
             const ::score::Decide* req,
             ::score::Committed* resp) {
               return service->DoDecide(ctx, req, resp);
             }, this)));
}

CControlRPC::Service::~Service() {
}

::grpc::Status CControlRPC::Service::DoReadRequest(::grpc::ServerContext* context, const ::score::ReadRequest* request, ::score::ReadReturn* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CControlRPC::Service::DoPrepare(::grpc::ServerContext* context, const ::score::Prepare* request, ::score::Vote* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CControlRPC::Service::DoDecide(::grpc::ServerContext* context, const ::score::Decide* request, ::score::Committed* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace score

